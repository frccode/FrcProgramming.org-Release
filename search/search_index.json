{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FRCCode","text":"<p># Welcome to FRCCode.org The Best FRC Software Tutorial</p> <p>Note</p> <p>Still tycho's version, needs a lot of work</p>"},{"location":"#about-us","title":"About Us","text":"<p>Currently FRCCode.org is powered by volunteer students who are passionate about programming and hope to share their knowledge with others. The website is constantly in a state of improvement and development, and is a work-in-progress. Please report any mistakes you see to the GitHub.</p> <p>Ready to level up? Join our Discord community for real-time help, code reviews, and collaboration.</p> <p>Support &amp; Help</p>"},{"location":"support_and_help/","title":"Support &amp; Help","text":"<p>If you have any questions or issues that you would like to raise, contact any of the following.</p> <ul> <li>tycho.young@gmail.com (gmail)</li> <li>tychoyoung7 (insta)</li> <li>ZenoCoding (github + reddit)</li> <li>ZenoX (steam)</li> <li>TychoYoung (X)</li> </ul> <p>In the case of which you do not recieve a response, keep spamming. We will respond if you give us enough notifications.</p>"},{"location":"Learn/Chapter_0/java_intro/","title":"Introduction to Java in FRC Programming","text":"<p>Note</p> <p>wrote: sean | edited: tycho | still needs proofreading - may be too long</p>"},{"location":"Learn/Chapter_0/java_intro/#choosing-a-programming-language","title":"Choosing a Programming Language","text":"<p>While possible to use Python and C++ to program competition robots, most teams choose to use Java (89.2% in 2025). Python is more beginner-friendly, and C++ is more powerful, but Java provides a good middle ground between performance, capability, and ease of use. </p> <p>Furthermore, due to its popularity as a first programming language in high-school curricula (in part through AP CSA), and its widespread online support, Java is a strong choice for most teams. </p> <p>When choosing a programming language for your team, you should choose the language that your team has the most experience and is the most comfortable working in. This experience will make learning programming that much easier\u2014there is much in FRC programming regardless of your language. </p> <p>However, for the above reasons, this guide will focus on Java as the primary programming language. In the future, we may look to expand support to C++ and Python, but the guide offers no support for these languages at this time. </p> <p>Thus, to begin programming, you must first have a solid background in the Java programming language.</p>"},{"location":"Learn/Chapter_0/java_intro/#prerequisites","title":"Prerequisites","text":"<p>Tip</p> <p>It isn't necessary to learn all of Java, particularly when it comes to Object-Oriented Programming. Because FRC programming uses of a subset of the language to accomplish most tasks, it is possible to start this course with a very surface level understanding of basic syntax. However, for more advanced behavior and programs, a deeper understanding of Java will become more important. </p> <p>To be able to start learning FRC Programming, a strong foundation in programming is necessary. Below is a list of topics that any FRC programmer should know:</p> <ul> <li>Variables and Data Types (e.g., int, double, boolean, String)</li> <li>Control Flow (if/else, switch, for/while loops)</li> <li>Methods and Functions (declaration, parameters, return values)</li> <li>Object-Oriented Programming (classes, objects, inheritance, polymorphism, encapsulation)</li> <li>Collections and Data Structures (arrays, Lists, Maps)</li> <li>Functional Interfaces (lambda, suppliers)</li> </ul>"},{"location":"Learn/Chapter_0/java_intro/#learning-java","title":"Learning Java","text":"<p>Cultivating a strong command of Java can be accomplished through a range of publicly available, high-quality learning channels. Whether you favor interactive exercises, comprehensive written guides, or instructor-led video lessons, choose resources that align with your personal learning style. Below is a curated selection to help you begin:</p>"},{"location":"Learn/Chapter_0/java_intro/#recommended-resources","title":"Recommended Resources","text":"<ul> <li> <p>Codecademy: Learn Java   An interactive, hands-on course that introduces core language constructs through guided challenges.</p> </li> <li> <p>LearnJavaOnline.org   A browser-based tutorial offering concise lessons accompanied by in-browser coding exercises.</p> </li> <li> <p>Oracle Java Tutorials   The official documentation and tutorials maintained by Oracle, providing authoritative coverage of the language.</p> </li> <li> <p>Bro Code (YouTube Channel)   A YouTube series offering concise Java tutorials and hands-on projects, ideal for visual learners.</p> </li> <li> <p>freeCodeCamp Java Tutorial for Beginners   A comprehensive, no-cost guide (written + video) covering Java fundamentals in depth.</p> </li> <li> <p>JetBrains Academy: Java Developer Track   A project-based learning environment that weaves coding exercises into real-world Java applications. (IntelliJ Only)</p> </li> </ul>"},{"location":"Learn/Chapter_1/github/","title":"Github and Github Desktop","text":""},{"location":"Learn/Chapter_1/github/#github","title":"Github","text":"<p>Sign in here: https://github.com/</p>"},{"location":"Learn/Chapter_1/github/#github-desktop","title":"Github Desktop","text":"<p>Download and Sign in: https://desktop.github.com/download/</p>"},{"location":"Learn/Chapter_1/national_instruments/","title":"National Instruments Game Tools","text":"<p>National Instruments Game Tools are used to ...</p> <p>They include:</p> <ul> <li>FRC Driver Station</li> <li>roboRIO Imaging Tool</li> </ul>"},{"location":"Learn/Chapter_1/national_instruments/#download-link","title":"Download Link","text":"<p>https://www.ni.com/en/support/downloads/drivers/download.frc-game-tools.html?#553883</p>"},{"location":"Learn/Chapter_1/prerequisites_intro/","title":"Prerequisites of FRC Programming","text":"<p>FRC programming requires multiple applications to be downloaded onto your computer. In this section, you will learn how to setup all of the applications below.</p>"},{"location":"Learn/Chapter_1/prerequisites_intro/#applications","title":"Applications","text":"<ul> <li>Wpilib</li> <li>Github &amp; Github Desktop</li> <li>National Instruments Game Tools</li> </ul>"},{"location":"Learn/Chapter_1/wpilib/","title":"WPIlib and Associated Tools","text":"<ol> <li>Go to the WPILib installation guide:  <p>https://docs.wpilib.org/en/stable/docs/zero-to-robot/step-2/wpilib-setup.html</p> </li> <li>Follow the instructions provided to install the latest version of WPILib.</li> </ol> <p>Wpilib VSCode vs VSCode</p> <p>Wpilib uses its own version VSCode which is impossible to tell apart from regular VSCode from the outside, so make sure you don't get them mixed up.</p> <p>WPILib includes many other tools that are helpful in robot programming, including:</p> <ul> <li>AdvantageScope</li> <li>Data Log Tool</li> <li>Elastic</li> <li>Glass</li> <li>OutlineViewer</li> <li>PathWeaver</li> <li>roboRIO Team Number Setter</li> <li>RobotBuilder</li> <li>Shuffleboard</li> <li>SmartDashboard</li> <li>SysId</li> <li>WPIcal</li> <li>Java Development Kit</li> </ul>"},{"location":"Learn/Chapter_2/simple_robot_programming/","title":"An Intro Through Timed Robot","text":"<p>At this point in the guide, you should have your VSCode and WPILib installed, as well as a fundamental understanding of the Java programming language. </p> <p>Important</p> <p>TS NOT DONE</p> <p>This module will introduce you to many beginner concepts that will be used throughout all of FRC programming using <code>TimedRobot</code> as an example. While other robot architectures are more popular and often more powerful, <code>TimedRobot</code> serves as an excellent stepping stone to introduce the fundamentals. </p>"},{"location":"Learn/Chapter_2/simple_robot_programming/#introduction-to-the-timedrobot-template","title":"Introduction to the TimedRobot Template","text":"<p>WPILib provides the <code>TimedRobot</code> base class to simplify handling robot periodic actions. A TimedRobot automatically calls key methods at regular intervals (default every 20 milliseconds), allowing you to focus on writing logic rather than managing timing.</p>"},{"location":"Learn/Chapter_2/simple_robot_programming/#the-timedrobot-class","title":"The <code>TimedRobot</code> Class","text":"<p>When you create a new robot project in VSCode with WPILib, the generated <code>Robot.java</code> will extend <code>TimedRobot</code>. This class includes several lifecycle methods that you can implement:</p> <ul> <li><code>robotInit()</code>: Runs once when the robot code first starts. Use this to initialize sensors, motors, cameras, and other hardware.</li> <li><code>autonomousInit()</code>: Called once each time the robot enters Autonomous mode. Reset relevant timers, encoders, or state variables here.</li> <li><code>autonomousPeriodic()</code>: Called periodically (every 20ms by default) during Autonomous mode. Place autonomous routines and sensor checks here.</li> <li><code>teleopInit()</code>: Called once each time the robot enters Teleoperated (Teleop) mode. Prepare any state for driver control.</li> <li><code>teleopPeriodic()</code>: Called periodically during Teleop mode. Read joystick inputs, update motor outputs, and run control loops here.</li> <li><code>disabledInit()</code> and <code>disabledPeriodic()</code>: Called when the robot is disabled. Useful for stopping motors or updating dashboards safely.</li> </ul>"},{"location":"Learn/Chapter_2/simple_robot_programming/#basic-project-structure","title":"Basic Project Structure","text":"<p>Here\u2019s an example skeleton of a <code>Robot.java</code> file:</p> <pre><code>package frc.robot;\n\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n\n    @Override\n    public void robotInit() {\n        // Initialize hardware and state\n    }\n\n    @Override\n    public void autonomousInit() {\n        // Reset sensors or timers before autonomous\n    }\n\n    @Override\n    public void autonomousPeriodic() {\n        // Autonomous control logic\n    }\n\n    @Override\n    public void teleopInit() {\n        // Any setup before teleop\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        // Driver control code\n    }\n\n    @Override\n    public void disabledInit() {\n        // Actions on disable\n    }\n\n    @Override\n    public void disabledPeriodic() {\n        // Periodic actions when disabled\n    }\n}\n</code></pre>"},{"location":"Learn/Chapter_3/command_based_programming/","title":"Command Based Programming","text":""},{"location":"Learn/Chapter_3/command_based_programming/#article","title":"Article","text":"<p>Go through the following link:</p> <p>https://docs.wpilib.org/en/stable/docs/software/commandbased/index.html</p>"},{"location":"Learn/Chapter_4/control_theory/","title":"Control Theory","text":""},{"location":"Learn/Chapter_4/control_theory/#article","title":"Article","text":"<p>Go through the following link:</p> <p>https://docs.wpilib.org/en/stable/docs/software/advanced-controls/index.html</p>"},{"location":"Learn/Chapter_5/drive_bases/","title":"Drive Bases","text":""},{"location":"Learn/Chapter_5/drive_bases/#types-of-drive-bases","title":"Types of Drive Bases","text":"<ul> <li>Differential</li> <li>Swerve</li> </ul> <p>West Coast Drive</p> <p>West Coast Drive is really just Tank Drive.</p>"},{"location":"Learn/Chapter_5/drive_bases/#article","title":"Article","text":"<p>Go through the following link:</p> <p>https://docs.revrobotics.com/frc-kickoff-concepts/2023/drivetrains</p>"}]}